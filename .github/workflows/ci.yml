name: Provision ATP

on: 
  #push:
    #branches:
      #- main
  issues:
    types: [opened, reopened]    
  workflow_dispatch:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      OCI_CLI_USER: ${{ secrets.TF_VAR_USER_OCID }}
      OCI_CLI_TENANCY: ${{ secrets.TF_VAR_TENANCY_OCID }}
      OCI_CLI_FINGERPRINT: ${{ secrets.TF_VAR_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.TF_VAR_PRIVATE_KEY }}
      OCI_CLI_REGION: ${{ secrets.TF_VAR_REGION }}

    steps:
      - uses: actions/checkout@v3
      
      - uses: hashicorp/setup-terraform@v2
          
      - run: |
         terraform -v 

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -reconfigure -backend-config="address=${{ secrets.TF_BACKEND_CONFIG }}"
        working-directory: "./src/main/resources/db/tf/modules/atp"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - uses: schdck/create-env-json@v1
        id: create-env
        with:
          file-name: './src/main/resources/db/tf/modules/atp/env.json'
          TENANCY_OCID: ${{ secrets.TF_VAR_TENANCY_OCID }}
          USER_OCID: ${{ secrets.TF_VAR_USER_OCID }}
          FINGERPRINT: ${{ secrets.TF_VAR_FINGERPRINT }}
          PRIVATE_KEY: ${{ secrets.TF_VAR_PRIVATE_KEY }}
          REGION: ${{ secrets.TF_VAR_REGION }}
          COMPARTMENT_OCID: ${{ secrets.TF_VAR_COMPARTMENT_OCID }}
          DB_NAME: ${{ secrets.TF_VAR_DB_NAME }}
          ADMIN_PASSWORD: ${{ secrets.TF_VAR_ADMIN_PASSWORD }}
          DB_VERSION: ${{ secrets.TF_VAR_DB_VERSION }}
          DB_WORKLOAD: ${{ secrets.TF_VAR_DB_WORKLOAD }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=env.json -out myplan -no-color
        working-directory: "./src/main/resources/db/tf/modules/atp"

      - name: Terraform Apply
        #if: "contains(github.event.head_commit.message, 'apply')"
        if: contains(github.event.issue.title, 'create-atp') 
        id: apply
        run: terraform apply -input=false -auto-approve myplan
        working-directory: "./src/main/resources/db/tf/modules/atp"
        
      - name: Retrieve the connexion url of ATP
        if: contains(github.event.issue.title, 'create-atp') 
        uses: oracle-actions/run-oci-cli-command@v1.0
        id: find-atp-url
        with:
          command: 'db autonomous-database list --compartment-id=${{ secrets.TF_VAR_COMPARTMENT_OCID }} --display-name=${{ secrets.TF_VAR_DB_NAME }} --lifecycle-state=AVAILABLE'
          query: 'data[*]."connection-strings"."profiles"[0].value'
          
      - name: show ATP url
        if: contains(github.event.issue.title, 'create-atp') 
        run: |
         echo "${{ steps.find-atp-url.outputs.raw_output }}"   

      - name: Terraform Destroy
        #if: "contains(github.event.head_commit.message, 'destroy')"
        if: contains(github.event.issue.title, 'destroy-atp') 
        id: destroy
        run: terraform destroy -auto-approve  
        working-directory: "./src/main/resources/db/tf/modules/atp"

         
        